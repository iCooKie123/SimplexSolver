@page "/"
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using SimplexSolver
<PageTitle>Simplex Solver</PageTitle>
<style>
    body {
        background-color: #E0E0E0;
    }
    input {
        width: 20px;
        height: 15px;
    }
    select {
        background-color: #ACE1AF;
        
    }
    button {
        background-color: #ACE1AF;
        border-radius: 5px;
    }

    .small-input {
        width: 20px;
    }

    hr {
        width: 100% !important;
    }

    .large-input {
        width: auto;
    }

    .table-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .table-container table {
        border-collapse: collapse; /* Optional: Collapse the border spacing */
    }

    .table-container th,
    .table-container td {
        border: 1px solid black; /* Add border to table cells */
        padding: 8px; /* Optional: Add padding for better spacing */
    }
    /* Chrome, Safari, Edge, and Opera */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type="number"] {
        -moz-appearance: textfield;
    }
</style>

<div style="margin: 0 auto; padding: 20px;">
    <div style="display: flex; flex-direction: column; justify-content: center; align-content: center;align-items: center">
        @errorVariables
        @errorRestrictii
    </div>
    <div style="display: flex; gap: 16px; justify-content: center; align-items: center;">

        <button @onclick="solutiePropusa">Solutie propusa</button>
        <h1>Variabile:</h1>
        <input type="number" @bind="@variabile" class="@(variabile < 100 ? "small-input" : "large-input")" @oninput="HandleInputVariabile" />
        <h1>Restrictii:</h1>
        <input type="number" @bind="@restrictii" class="@(restrictii < 100 ? "small-input" : "large-input")" @oninput="HandleInputRestricti" />
        <button @onclick="genereazaTabel">@ButtonText</button>
    </div>

    @if (tabelVisible)
    {
        <div style="display: flex; gap:16px; align-items: center; justify-content: center;">
            <select @bind="@SelectedMode">
                <option value="max">Max</option>
                <option value="min">Min</option>
            </select>
            <p>f=</p>
            @for (int i = 0; i < functionValues?.Length; i++)
            {
                double row = i;
                double value = functionValues[i]; // Temporary variable
                <input type="number" @bind="value" @oninput="(e) => HandleInputFunctionValues(e, (int)row, value)" />
                <p>x @(i+1)</p>
                @if (i != functionValues?.Length - 1)
                {
                    <p>+</p>
                }
                functionValues[i] = value; // Update the array with the modified value
            }
        </div>
        <div style="display: flex; gap:16px; align-items: center; justify-content: center;">
            <table>
                <tbody>
                    @for (int i = 0; i < matrix?.Length; i++)
                    {
                        <tr>
                            @for (int j = 0; j < variabile; j++)
                            {
                                double row = i; // Create a local copy of i
                                double column = j; // Create a local copy of j
                                <td>
                                    <input type="number" value="@matrix[(int)row][(int)column]" @oninput="(e) => HandleInputMatrix(e, (int)row, (int)column)" />
                                </td>
                                <td><p>x @(j+1)</p></td>
                                @if (j != variabile - 1)
                                {
                                    <td>
                                        <p>+</p>
                                    </td>
                                }
                            }
                            @if (i < restrictionValues?.Length)
                            {
                                int row = i; // Create a local copy of i
                                <td><p>≤</p></td>
                                <td><input type="number" value="@restrictionValues[i]" @oninput="(e) => HandleInputRestriction(e, row)" /></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div style="display: flex; justify-content: center">
            <button @onclick="OnCheckButtonClicked">Rezolva</button>
        </div>

        <hr />

        @if (simplexSteps != null)
        {
            <h2>Pasii pentru Algoritmul Simplex:</h2>
            <div class="table-container">
                @foreach (var step in simplexSteps)
                {
                    <div>
                        <h3>Iteratia @step.StepNumber:</h3>
                        <p>Tabel:</p>
                        <table>
                            <thead>
                                <tr>
                                    @foreach (var header in step.TableHeaders)
                                    {
                                        <th>@header</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>

                                @for (var i = 0; i < step.TableRows.Length; i++)
                                {
                                    <tr>
                                        @for (var j = 0; j < step.TableRows[i].Length; j++)
                                        {
                                            <td style="@((i == step.PivotRow && j == step.PivotColumn) ? "background-color: #ACE1AF;" : "")">@step.TableRows[i][j]</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                            <thead>
                            <th>@($"Z{step.StepNumber}")</th>
                            <th> </th>
                            <th> </th>
                                @for (int i = 0; i < step.DeltaJ.Length; i++)
                                {
                                    var deltaJString = $"Δ{i + 1}";
                                <th>@deltaJString</th>
                                }
                            </thead>
                            <tbody>
                                <tr>
                                    <th>@step.ZK</th>
                                    <th> </th>
                                    <th> </th>
                                    @foreach (var deltaJ in step.DeltaJ)
                                    {
                                        <th>@deltaJ</th>
                                    }
                                </tr>
                            </tbody>
                        </table>
                        <br />

                        @if (step.Observatii.Count > 0)
                        {

                            @foreach (var observatie in step.Observatii)
                            {
                                <p>@observatie</p>
                            }
                        }
                    </div>
                    <hr />
                }
            </div>
        }
    }
</div>